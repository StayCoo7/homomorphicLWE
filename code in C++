#include <iostream>
#include <stdio.h>
#include <ctime>
#include <cstdlib>
#include <cmath>

using namespace std;

int *toBinary(int M)
{
	int *arrBinary = new int[8];
	int m=0;
	while(M > 1)
	{
		arrBinary[m++] = M%2 ;
		M = M/2;
	}
	arrBinary[m] = M;
	for(int i=m+1;i<8;i++)
		arrBinary[i]=0;	
	return arrBinary;
}


int *get_uv(int A[],int lenA,int B[],int lenB,int bitValue,int q,int nvals)
{
	int *uv = new int[2];
	uv[0]=0;
	uv[1]=0;
	int sample[nvals/4];
	
	for(int i=0;i<nvals/4;i++)
	{
		sample[i]=rand()%(18+1);//sample[index] between [0,18]
	}
	cout<<"\n[";
	for(int i = 0; i <nvals/4; i++)
	{
		cout<<sample[i];
		if(i<4)
		cout<<","; 
	}
	cout<<"]\n";
	for(int i =0;i<nvals/4;i++)
	{
		uv[0]=uv[0]+(A[sample[i]]);
		uv[1]=uv[1]+B[sample[i]];
	}
	uv[1]=uv[1]+floor(q/2)*bitValue;
	uv[0] = uv[0]%q;
	uv[1] = uv[1]%q;
	return uv;
}

int get_result(int u1,int v1,int u2,int v2,int q,int s)
{
	
	int result = ((v1-s*u1) + (v2-s*u2)) % q;
	
	if(result < 0)
		result = q +result;
	if(result > q/2)
	{
		return 1;
	}
	return 0;
}

int main(int argc, char** argv) {
	
	srand((unsigned)time(NULL));
	int nvals = 20 ;
	int B[nvals];
	int A[nvals];
	int e[nvals];
	int s = 20;
	int M1 = 2;
	int M2 = 2;
	int *M1Binary;
	int *M2Binary;
	
	int q = 97 ;
	int i,j;
	//random between [a,b]：rand()%(b-a+1)+a；
	for(i = 0 ;i< nvals ; i++)
	{
		A[i]= rand()%(q); // A[index] between [0,96]
		e[i]= rand()%3 + 1;//e[index] between [1,3]
		B[i] = (A[i]*s+e[i])%q ;
	}
	
	printf("\n------Parameters and keys-------\n");
	printf("Value to cipher:\t%d , %d",M1,M2);
	printf("\nPublic Key (A):\t");
	for(i = 0 ;i< nvals ; i++)
	{
		cout<<A[i]<<"  ";
	}
	
	printf("\nPublic Key (B):\t");
	for(i = 0 ;i< nvals ; i++)
	{
		cout<<B[i]<<"  ";
	}
	printf("\nErrors (e):\t\t");
	for(i = 0 ;i< nvals ; i++)
	{
		cout<<e[i]<<"  ";
	}
	printf("\nSecret key:\t\t%d",s);
	printf("\nPrime number:\t\t%d\n\n\n\n",q);
	
	
	printf("\n------Sampling Process from public key-------\n");
	
	printf("Bits to be ciphered:");
	M1Binary = toBinary(M1);
	cout<<"[";
	for(i = 0; i <8; i++)
	{
		cout<<M1Binary[i];
		if(i<7)
		cout<<","; 
	}
	cout<<"]   ";
	M2Binary = toBinary(M2);
	cout<<"[";
	for(i = 0; i <8; i++)
	{
		cout<<M2Binary[i];
		if(i<7)
		cout<<","; 
	}
	cout<<"]\n";
	
	int *u1v1_1=get_uv(A,nvals,B,nvals,M1Binary[0],q,nvals);
	int *u2v2_1=get_uv(A,nvals,B,nvals,M1Binary[1],q,nvals);;
	int *u3v3_1=get_uv(A,nvals,B,nvals,M1Binary[2],q,nvals);;
	int *u4v4_1=get_uv(A,nvals,B,nvals,M1Binary[3],q,nvals);;
	
	int *u1v1_2=get_uv(A,nvals,B,nvals,M2Binary[0],q,nvals);
	int *u2v2_2=get_uv(A,nvals,B,nvals,M2Binary[1],q,nvals);;
	int *u3v3_2=get_uv(A,nvals,B,nvals,M2Binary[2],q,nvals);;
	int *u4v4_2=get_uv(A,nvals,B,nvals,M2Binary[3],q,nvals);;
	
	printf("\n\n------Results                -----------------\n");
	
	printf("Result bit0 is %d\n",get_result(u1v1_1[0],u1v1_1[1],u1v1_2[0],u1v1_2[1],q,s));
	printf("Result bit1 is %d\n",get_result(u2v2_1[0],u2v2_1[1],u2v2_2[0],u2v2_2[1],q,s));
	printf("Result bit2 is %d\n",get_result(u3v3_1[0],u3v3_1[1],u3v3_2[0],u3v3_2[1],q,s));
	printf("Result bit3 is %d\n",get_result(u4v4_1[0],u4v4_1[1],u4v4_2[0],u4v4_2[1],q,s));
	
	return 0;
}
